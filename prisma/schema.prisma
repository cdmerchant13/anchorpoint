// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  password      String
  dutyStation   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  sessions      Session[]
  accounts      Account[]
  submissions   Submission[]
  votes         Vote[]
  comments      Comment[]
}

model Base {
  id        String    @id @default(uuid())
  name      String
  location  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  submissions Submission[]
}

model Submission {
  id           String   @id @default(uuid())
  baseId       String
  userId       String
  rawText      String
  processedJson String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  base         Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes        Vote[]
  comments     Comment[]
}

model Vote {
  id           String   @id @default(uuid())
  submissionId String
  userId       String
  value        Int      // +1 for upvote, -1 for downvote
  createdAt    DateTime @default(now())
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([submissionId, userId]) // One vote per user per submission
}

model Comment {
  id             String    @id @default(uuid())
  submissionId   String
  userId         String
  parentCommentId String?  // For threaded replies
  text           String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  submission     Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent         Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies        Comment[] @relation("CommentReplies")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
